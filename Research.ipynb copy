{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy.ma as ma\n",
    "from scipy.optimize import least_squares\n",
    "from scipy.optimize import minimize\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatches\n",
    "import seaborn as sns\n",
    "import math\n",
    "import astropy.units as u\n",
    "from astropy.io.votable import parse\n",
    "from astropy.timeseries import LombScargle\n",
    "import os\n",
    "from george import kernels\n",
    "from datetime import datetime\n",
    "from astroquery.vizier import Vizier\n",
    "import exoplanet as xo\n",
    "import theano.tensor as tt\n",
    "import progressbar as pbar\n",
    "import time\n",
    "\n",
    "import tensorflow.keras as keras\n",
    "from tensorflow.keras.datasets import mnist\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras.layers import Dense, Dropout, Flatten, Input, BatchNormalization\n",
    "from tensorflow.keras.layers import Conv1D, MaxPooling1D, Reshape, \\\n",
    "                                                    Activation, BatchNormalization, UpSampling1D, \\\n",
    "                                                    UpSampling2D\n",
    "from tensorflow.keras.callbacks import LearningRateScheduler\n",
    "from tensorflow.keras import backend as K\n",
    "import tensorflow as tf\n",
    "\n",
    "# Default graph settings\n",
    "plt.rcParams[\"figure.figsize\"] = (12,8)\n",
    "plt.rcParams['legend.fontsize'] = 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "use_full_data = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```SQL\n",
    "SELECT\n",
    "ra,                ra_error,\n",
    "dec,               dec_error,\n",
    "pmra,              pmra_error,\n",
    "pmdec,             pmdec_error,\n",
    "parallax,          parallax_error,\n",
    "phot_g_mean_flux,  phot_g_mean_flux_error,\n",
    "phot_bp_mean_flux, phot_bp_mean_flux_error,\n",
    "phot_rp_mean_flux, phot_rp_mean_flux_error,\n",
    "bp_rp,\n",
    "bp_g,\n",
    "g_rp,\n",
    "radial_velocity,   radial_velocity_error,\n",
    "teff_val,\n",
    "a_g_val,\n",
    "radius_val,\n",
    "lum_val\n",
    "\n",
    "FROM gaiadr2.gaia_source\n",
    "\n",
    "WHERE\n",
    "ra IS NOT NULL AND ra_error IS NOT NULL\n",
    "AND dec IS NOT NULL AND dec_error IS NOT NULL\n",
    "AND pmra IS NOT NULL AND pmra_error IS NOT NULL\n",
    "AND pmdec IS NOT NULL AND pmdec_error IS NOT NULL\n",
    "AND parallax IS NOT NULL AND parallax_error IS NOT NULL\n",
    "AND phot_g_mean_flux IS NOT NULL AND phot_g_mean_flux_error IS NOT NULL\n",
    "AND phot_bp_mean_flux IS NOT NULL AND phot_bp_mean_flux_error IS NOT NULL\n",
    "AND phot_rp_mean_flux IS NOT NULL AND phot_rp_mean_flux_error IS NOT NULL\n",
    "AND bp_rp IS NOT NULL\n",
    "AND bp_g IS NOT NULL\n",
    "AND g_rp IS NOT NULL\n",
    "AND radial_velocity IS NOT NULL AND radial_velocity_error IS NOT NULL\n",
    "AND teff_val IS NOT NULL\n",
    "AND a_g_val IS NOT NULL\n",
    "AND radius_val IS NOT NULL\n",
    "AND lum_val IS NOT NULL\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ra\n",
      "dec\n",
      "pmra\n",
      "pmdec\n",
      "parallax\n",
      "phot_g_mean_flux\n",
      "phot_bp_mean_flux\n",
      "phot_rp_mean_flux\n",
      "bp_rp\n",
      "bp_g\n",
      "g_rp\n",
      "radial_velocity\n",
      "teff_val\n",
      "a_g_val\n",
      "radius_val\n",
      "lum_val\n"
     ]
    }
   ],
   "source": [
    "# all_data = parse('queries/query1_full.vot' if use_full_data\n",
    "#                  else 'queries/query1_smallversion500k.vot')\n",
    "all_data = parse('queries/query1_full_no_errors.vot')\n",
    "d_table  = all_data.get_first_table()\n",
    "data     = np.array(d_table.array) # makes everything run in reasonable time\n",
    "\n",
    "feature_id_dict = {}\n",
    "i = 0\n",
    "for f in d_table.fields:\n",
    "    print(f.ID)\n",
    "    feature_id_dict[i] = f.ID\n",
    "    feature_id_dict[f.ID] = i\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total data points: 4193907\n"
     ]
    }
   ],
   "source": [
    "print(\"Total data points:\", len(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "| |                                               #  | 15 Elapsed Time: 0:00:54\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.59999891e+02, 8.99472372e+01, 4.16417405e+03, 5.81785597e+03,\n",
       "       2.86145665e+02, 9.08637357e+08, 2.99122451e+08, 7.25703224e+08,\n",
       "       5.16911221e+00, 3.63341141e+00, 1.70443535e+00, 9.84274896e+02,\n",
       "       8.00000000e+03, 3.31699991e+00, 5.12684265e+02, 3.55358594e+04])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prepare to normalize data\n",
    "normalize_factors = np.array([max(np.absolute(ele))\n",
    "                              for ele in pbar.progressbar(zip(*data))]) # max of each field\n",
    "normalize_factors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100% (4193907 of 4193907) |##############| Elapsed Time: 0:01:20 Time:  0:01:20\n"
     ]
    }
   ],
   "source": [
    "# Normalize data\n",
    "norm_data = np.array([np.divide(np.array([float(i) for i in star]), normalize_factors) \n",
    "                      for star in pbar.progressbar(data)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100% (4193907 of 4193907) |##############| Elapsed Time: 0:00:08 Time:  0:00:08\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2516061 training points, 837909 validation points, 839937 test points.\n"
     ]
    }
   ],
   "source": [
    "# Copy data into training, validation, and testing sets (~60/20/20)\n",
    "x_train_norm = []\n",
    "x_test_norm  = []\n",
    "x_val_norm   = []\n",
    "\n",
    "for star in pbar.progressbar(norm_data):\n",
    "    if (np.random.random() >= 0.6):\n",
    "        if (np.random.random() >= 0.5):\n",
    "            x_test_norm.append(star)\n",
    "        else:\n",
    "            x_val_norm.append(star)\n",
    "    else:\n",
    "        x_train_norm.append(star)\n",
    "\n",
    "x_train_norm = np.reshape(np.array(x_train_norm),\n",
    "                          (len(x_train_norm), 1, len(d_table.fields)))\n",
    "x_test_norm  = np.reshape(np.array(x_test_norm),\n",
    "                          (len(x_test_norm),  1, len(d_table.fields)))\n",
    "x_val_norm   = np.reshape(np.array(x_val_norm), \n",
    "                          (len(x_val_norm),   1, len(d_table.fields)))\n",
    "\n",
    "# x_train_norm = np.reshape(np.array(x_train_norm), (len(x_train_norm), len(d_table.fields)))\n",
    "# x_test_norm  = np.reshape(np.array(x_test_norm),  (len(x_test_norm),  len(d_table.fields)))\n",
    "# x_val_norm   = np.reshape(np.array(x_val_norm),   (len(x_val_norm),   len(d_table.fields)))\n",
    "\n",
    "x_test = np.multiply(x_test_norm, normalize_factors)\n",
    "x_test_T = x_test.T\n",
    "\n",
    "print(len(x_train_norm), \"training points,\",\n",
    "      len(x_val_norm),   \"validation points,\",\n",
    "      len(x_test_norm),  \"test points.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "### VAE MODEL FOR SMALL FEATURE SELECTION WITH NO ERRORS (16 COLUMNS)\n",
    "\n",
    "batch_size      = 128\n",
    "bottleneck_size = 5\n",
    "# input_star      = Input(shape = (1, len(d_table.fields)))\n",
    "\n",
    "autoencoder = keras.Sequential(\n",
    "                  [\n",
    "                      Dense(18, activation=\"relu\"),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(18, activation=\"relu\"),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(14, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(8, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(6, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(bottleneck_size, activation='linear'),\n",
    "\n",
    "                      Dense(6, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(8, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(14, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(18, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(18, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(len(d_table.fields), activation='linear')\n",
    "                  ]\n",
    "              )\n",
    "# autoencoder.build((batch_size, 1, len(d_table.fields)))\n",
    "# autoencoder.build((batch_size, len(d_table.fields)))\n",
    "# autoencoder.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "def customLossFn(actual, predicted):\n",
    "#     print(K.print_tensor(K.transpose(actual)))\n",
    "#     loss = 0\n",
    "    kl = tf.keras.losses.KLDivergence()\n",
    "    return kl(K.transpose(actual), K.transpose(predicted))\n",
    "#     for feature in range(len(actual[0])):\n",
    "#         loss += kl(K.transpose(actual)[0][i], K.transpose(predicted)[0][i])\n",
    "#     loss = shared(np.array([kl_loss] * actual.ndim))\n",
    "#     print(loss)\n",
    "#     return loss\n",
    "\n",
    "def step_decay_lrate(initial_lrate, drop, epochs_drop):\n",
    "    def lrate(epoch):\n",
    "        return initial_lrate * math.pow(drop, math.floor((1+epoch)/epochs_drop))\n",
    "    return LearningRateScheduler(lrate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ... nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "Epoch 1/30\n",
      "    2/19657 [..............................] - ETA: 48:52 - loss: 0.0063WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0062s vs `on_train_batch_end` time: 0.2924s). Check your callbacks.\n",
      "19656/19657 [============================>.] - ETA: 0s - loss: 0.0073\n",
      "Epoch 00001: val_loss improved from inf to 0.00806, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 69s 4ms/step - loss: 0.0073 - val_loss: 0.0081\n",
      "Epoch 2/30\n",
      "19650/19657 [============================>.] - ETA: 0s - loss: 0.0068\n",
      "Epoch 00002: val_loss improved from 0.00806 to 0.00440, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 67s 3ms/step - loss: 0.0068 - val_loss: 0.0044\n",
      "Epoch 3/30\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0066\n",
      "Epoch 00003: val_loss improved from 0.00440 to 0.00415, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 68s 3ms/step - loss: 0.0066 - val_loss: 0.0041\n",
      "Epoch 4/30\n",
      "19644/19657 [============================>.] - ETA: 0s - loss: 0.0066\n",
      "Epoch 00004: val_loss improved from 0.00415 to 0.00365, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 70s 4ms/step - loss: 0.0066 - val_loss: 0.0036\n",
      "Epoch 5/30\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0065\n",
      "Epoch 00005: val_loss improved from 0.00365 to 0.00337, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0065 - val_loss: 0.0034\n",
      "Epoch 6/30\n",
      "19644/19657 [============================>.] - ETA: 0s - loss: 0.0065\n",
      "Epoch 00006: val_loss improved from 0.00337 to 0.00286, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 73s 4ms/step - loss: 0.0065 - val_loss: 0.0029\n",
      "Epoch 7/30\n",
      "19643/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00007: val_loss did not improve from 0.00286\n",
      "19657/19657 [==============================] - 72s 4ms/step - loss: 0.0061 - val_loss: 0.0030\n",
      "Epoch 8/30\n",
      "19650/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00008: val_loss did not improve from 0.00286\n",
      "19657/19657 [==============================] - 73s 4ms/step - loss: 0.0061 - val_loss: 0.0031\n",
      "Epoch 9/30\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00009: val_loss did not improve from 0.00286\n",
      "19657/19657 [==============================] - 73s 4ms/step - loss: 0.0061 - val_loss: 0.0030\n",
      "Epoch 10/30\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00010: val_loss improved from 0.00286 to 0.00264, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0061 - val_loss: 0.0026\n",
      "Epoch 11/30\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00011: val_loss did not improve from 0.00264\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0061 - val_loss: 0.0031\n",
      "Epoch 12/30\n",
      "19654/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00012: val_loss did not improve from 0.00264\n",
      "19657/19657 [==============================] - 80s 4ms/step - loss: 0.0061 - val_loss: 0.0030\n",
      "Epoch 13/30\n",
      "19645/19657 [============================>.] - ETA: 0s - loss: 0.0061\n",
      "Epoch 00013: val_loss improved from 0.00264 to 0.00253, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0061 - val_loss: 0.0025\n",
      "Epoch 14/30\n",
      "19656/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00014: val_loss improved from 0.00253 to 0.00240, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 77s 4ms/step - loss: 0.0059 - val_loss: 0.0024\n",
      "Epoch 15/30\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00015: val_loss did not improve from 0.00240\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0059 - val_loss: 0.0024\n",
      "Epoch 16/30\n",
      "19650/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00016: val_loss improved from 0.00240 to 0.00240, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0059 - val_loss: 0.0024\n",
      "Epoch 17/30\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00017: val_loss improved from 0.00240 to 0.00221, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 75s 4ms/step - loss: 0.0059 - val_loss: 0.0022\n",
      "Epoch 18/30\n",
      "19654/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00018: val_loss did not improve from 0.00221\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0059 - val_loss: 0.0025\n",
      "Epoch 19/30\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00019: val_loss did not improve from 0.00221\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0059 - val_loss: 0.0024\n",
      "Epoch 20/30\n",
      "19645/19657 [============================>.] - ETA: 0s - loss: 0.0059\n",
      "Epoch 00020: val_loss did not improve from 0.00221\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0059 - val_loss: 0.0024\n",
      "Epoch 21/30\n",
      "19643/19657 [============================>.] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00021: val_loss improved from 0.00221 to 0.00219, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 74s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 22/30\n",
      "19644/19657 [============================>.] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00022: val_loss did not improve from 0.00219\n",
      "19657/19657 [==============================] - 73s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 23/30\n",
      "19645/19657 [============================>.] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00023: val_loss did not improve from 0.00219\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0058 - val_loss: 0.0023\n",
      "Epoch 24/30\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00024: val_loss did not improve from 0.00219\n",
      "19657/19657 [==============================] - 77s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 25/30\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00025: val_loss did not improve from 0.00219\n",
      "19657/19657 [==============================] - 75s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 26/30\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00026: val_loss improved from 0.00219 to 0.00218, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 85s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 27/30\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0058\n",
      "Epoch 00027: val_loss did not improve from 0.00218\n",
      "19657/19657 [==============================] - 77s 4ms/step - loss: 0.0058 - val_loss: 0.0022\n",
      "Epoch 28/30\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0057\n",
      "Epoch 00028: val_loss improved from 0.00218 to 0.00208, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0057 - val_loss: 0.0021\n",
      "Epoch 29/30\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0057\n",
      "Epoch 00029: val_loss did not improve from 0.00208\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0057 - val_loss: 0.0022\n",
      "Epoch 30/30\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0057\n",
      "Epoch 00030: val_loss did not improve from 0.00208\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0057 - val_loss: 0.0021\n"
     ]
    }
   ],
   "source": [
    "logdir = os.path.join(\"nn_results\", datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\n",
    "run_time_string = datetime.utcnow().isoformat(timespec='minutes')\n",
    "\n",
    "model_path = f'nn_results/gaia_v1_autoencoder_nn_{run_time_string}.h5'\n",
    "print(f\"Training ... {model_path}\")\n",
    "\n",
    "\n",
    "model_check = tf.keras.callbacks.ModelCheckpoint(model_path,\n",
    "                                                 monitor='val_loss', \n",
    "                                                 save_best_only=True, \n",
    "                                                 mode='min',\n",
    "                                                 verbose=1)\n",
    "\n",
    "tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, \n",
    "                                                      histogram_freq = 0, \n",
    "                                                      write_graph = True, \n",
    "                                                      write_grads = False, \n",
    "                                                      write_images = False, \n",
    "                                                      embeddings_freq=0, \n",
    "                                                      embeddings_layer_names=None, \n",
    "                                                      embeddings_metadata=None,\n",
    "                                                      embeddings_data=None)\n",
    "\n",
    "autoencoder.compile(optimizer='adam', loss='mean_squared_error')#['mean_squared_error', tf.keras.losses.KLDivergence()]\n",
    "\n",
    "autoencoder_train = autoencoder.fit(x_train_norm, x_train_norm, \n",
    "                                    batch_size=batch_size,epochs=30,\n",
    "                                    verbose=1, shuffle=False, \n",
    "                                    validation_data=(x_val_norm, x_val_norm),\n",
    "                                    callbacks=[step_decay_lrate(0.01,0.5,7.0),\n",
    "                                               tensorboard_callback,\n",
    "                                               model_check],\n",
    "                                    initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Run to load a specific set of weights\n",
    "\n",
    "autoencoder.load_weights('nn_results/gaia_v1_autoencoder_nn_2020-08-15T0255.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "bottleneck_size2 = 6\n",
    "\n",
    "autoencoder2 = keras.Sequential(\n",
    "                  [\n",
    "                      \n",
    "                      Dense(15, activation=\"relu\"),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(15, activation=\"relu\"),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(14, activation=\"relu\"),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(14, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      Dropout(.1),\n",
    "                      \n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(8, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(7, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(bottleneck_size2, activation='linear'),\n",
    "\n",
    "                      Dense(7, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(8, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(10, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(12, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(14, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(14, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(15, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "                      \n",
    "                      Dense(15, activation='relu'),\n",
    "                      BatchNormalization(),\n",
    "\n",
    "                      Dense(len(d_table.fields), activation='linear')\n",
    "                  ]\n",
    "              )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "    2/19657 [..............................] - ETA: 53:16 - loss: -0.0451WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0052s vs `on_train_batch_end` time: 0.3200s). Check your callbacks.\n",
      "19656/19657 [============================>.] - ETA: 0s - loss: 0.1055\n",
      "Epoch 00001: val_loss improved from inf to 0.22580, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 84s 4ms/step - loss: 0.1055 - val_loss: 0.2258\n",
      "Epoch 2/50\n",
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0662\n",
      "Epoch 00002: val_loss improved from 0.22580 to 0.14881, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 83s 4ms/step - loss: 0.0662 - val_loss: 0.1488\n",
      "Epoch 3/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.1276\n",
      "Epoch 00003: val_loss improved from 0.14881 to 0.02660, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 80s 4ms/step - loss: 0.1276 - val_loss: 0.0266\n",
      "Epoch 4/50\n",
      "19645/19657 [============================>.] - ETA: 0s - loss: 0.1009\n",
      "Epoch 00004: val_loss improved from 0.02660 to 0.00620, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.1008 - val_loss: 0.0062\n",
      "Epoch 5/50\n",
      "19656/19657 [============================>.] - ETA: 0s - loss: 0.0255\n",
      "Epoch 00005: val_loss improved from 0.00620 to 0.00448, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0255 - val_loss: 0.0045\n",
      "Epoch 6/50\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0182\n",
      "Epoch 00006: val_loss did not improve from 0.00448\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0182 - val_loss: 0.0143\n",
      "Epoch 7/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0148\n",
      "Epoch 00007: val_loss did not improve from 0.00448\n",
      "19657/19657 [==============================] - 77s 4ms/step - loss: 0.0148 - val_loss: 0.0089\n",
      "Epoch 8/50\n",
      "19653/19657 [============================>.] - ETA: 0s - loss: 0.0129\n",
      "Epoch 00008: val_loss improved from 0.00448 to 0.00436, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 77s 4ms/step - loss: 0.0129 - val_loss: 0.0044\n",
      "Epoch 9/50\n",
      "19650/19657 [============================>.] - ETA: 0s - loss: 0.0182\n",
      "Epoch 00009: val_loss did not improve from 0.00436\n",
      "19657/19657 [==============================] - 76s 4ms/step - loss: 0.0182 - val_loss: 0.0201\n",
      "Epoch 10/50\n",
      "19645/19657 [============================>.] - ETA: 0s - loss: 0.0115\n",
      "Epoch 00010: val_loss did not improve from 0.00436\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0115 - val_loss: 0.0072\n",
      "Epoch 11/50\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0106\n",
      "Epoch 00011: val_loss did not improve from 0.00436\n",
      "19657/19657 [==============================] - 88s 4ms/step - loss: 0.0107 - val_loss: 0.0054\n",
      "Epoch 12/50\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0102\n",
      "Epoch 00012: val_loss improved from 0.00436 to 0.00391, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 85s 4ms/step - loss: 0.0102 - val_loss: 0.0039\n",
      "Epoch 13/50\n",
      "19644/19657 [============================>.] - ETA: 0s - loss: 0.0103\n",
      "Epoch 00013: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0103 - val_loss: 0.0059\n",
      "Epoch 14/50\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0102\n",
      "Epoch 00014: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 81s 4ms/step - loss: 0.0102 - val_loss: 0.0055\n",
      "Epoch 15/50\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0093\n",
      "Epoch 00015: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0093 - val_loss: 0.0049\n",
      "Epoch 16/50\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0087\n",
      "Epoch 00016: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0087 - val_loss: 0.0078\n",
      "Epoch 17/50\n",
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0087\n",
      "Epoch 00017: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0087 - val_loss: 0.0054\n",
      "Epoch 18/50\n",
      "19654/19657 [============================>.] - ETA: 0s - loss: 0.0083\n",
      "Epoch 00018: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0083 - val_loss: 0.0044\n",
      "Epoch 19/50\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0085\n",
      "Epoch 00019: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0085 - val_loss: 0.0052\n",
      "Epoch 20/50\n",
      "19644/19657 [============================>.] - ETA: 0s - loss: 0.0082\n",
      "Epoch 00020: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 78s 4ms/step - loss: 0.0082 - val_loss: 0.0045\n",
      "Epoch 21/50\n",
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0079\n",
      "Epoch 00021: val_loss did not improve from 0.00391\n",
      "19657/19657 [==============================] - 1042s 53ms/step - loss: 0.0079 - val_loss: 0.0043\n",
      "Epoch 22/50\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0077\n",
      "Epoch 00022: val_loss improved from 0.00391 to 0.00386, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 2130s 108ms/step - loss: 0.0077 - val_loss: 0.0039\n",
      "Epoch 23/50\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0075\n",
      "Epoch 00023: val_loss did not improve from 0.00386\n",
      "19657/19657 [==============================] - 521s 26ms/step - loss: 0.0075 - val_loss: 0.0047\n",
      "Epoch 24/50\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0075\n",
      "Epoch 00024: val_loss improved from 0.00386 to 0.00322, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0075 - val_loss: 0.0032\n",
      "Epoch 25/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0074\n",
      "Epoch 00025: val_loss improved from 0.00322 to 0.00306, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 81s 4ms/step - loss: 0.0074 - val_loss: 0.0031\n",
      "Epoch 26/50\n",
      "19646/19657 [============================>.] - ETA: 0s - loss: 0.0073\n",
      "Epoch 00026: val_loss did not improve from 0.00306\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0073 - val_loss: 0.0031\n",
      "Epoch 27/50\n",
      "19654/19657 [============================>.] - ETA: 0s - loss: 0.0073\n",
      "Epoch 00027: val_loss did not improve from 0.00306\n",
      "19657/19657 [==============================] - 80s 4ms/step - loss: 0.0073 - val_loss: 0.0033\n",
      "Epoch 28/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0073\n",
      "Epoch 00028: val_loss did not improve from 0.00306\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0073 - val_loss: 0.0034\n",
      "Epoch 29/50\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00029: val_loss improved from 0.00306 to 0.00289, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 80s 4ms/step - loss: 0.0073 - val_loss: 0.0029\n",
      "Epoch 30/50\n",
      "19643/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00030: val_loss improved from 0.00289 to 0.00272, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0072 - val_loss: 0.0027\n",
      "Epoch 31/50\n",
      "19653/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00031: val_loss did not improve from 0.00272\n",
      "19657/19657 [==============================] - 79s 4ms/step - loss: 0.0072 - val_loss: 0.0028\n",
      "Epoch 32/50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00032: val_loss did not improve from 0.00272\n",
      "19657/19657 [==============================] - 84s 4ms/step - loss: 0.0072 - val_loss: 0.0028\n",
      "Epoch 33/50\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00033: val_loss did not improve from 0.00272\n",
      "19657/19657 [==============================] - 84s 4ms/step - loss: 0.0072 - val_loss: 0.0029\n",
      "Epoch 34/50\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00034: val_loss did not improve from 0.00272\n",
      "19657/19657 [==============================] - 84s 4ms/step - loss: 0.0072 - val_loss: 0.0030\n",
      "Epoch 35/50\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00035: val_loss improved from 0.00272 to 0.00264, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 91s 5ms/step - loss: 0.0072 - val_loss: 0.0026\n",
      "Epoch 36/50\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0071\n",
      "Epoch 00036: val_loss improved from 0.00264 to 0.00255, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 89s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 37/50\n",
      "19652/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00037: val_loss did not improve from 0.00255\n",
      "19657/19657 [==============================] - 87s 4ms/step - loss: 0.0072 - val_loss: 0.0026\n",
      "Epoch 38/50\n",
      "19650/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00038: val_loss did not improve from 0.00255\n",
      "19657/19657 [==============================] - 90s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 39/50\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0071\n",
      "Epoch 00039: val_loss did not improve from 0.00255\n",
      "19657/19657 [==============================] - 92s 5ms/step - loss: 0.0072 - val_loss: 0.0028\n",
      "Epoch 40/50\n",
      "19657/19657 [==============================] - ETA: 0s - loss: 0.0073\n",
      "Epoch 00040: val_loss improved from 0.00255 to 0.00250, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 91s 5ms/step - loss: 0.0073 - val_loss: 0.0025\n",
      "Epoch 41/50\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00041: val_loss improved from 0.00250 to 0.00248, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 90s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 42/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0071\n",
      "Epoch 00042: val_loss did not improve from 0.00248\n",
      "19657/19657 [==============================] - 91s 5ms/step - loss: 0.0071 - val_loss: 0.0026\n",
      "Epoch 43/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00043: val_loss did not improve from 0.00248\n",
      "19657/19657 [==============================] - 86s 4ms/step - loss: 0.0072 - val_loss: 0.0027\n",
      "Epoch 44/50\n",
      "19648/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00044: val_loss improved from 0.00248 to 0.00247, saving model to nn_results/gaia_v1_autoencoder_nn_2020-08-15T02:55.h5\n",
      "19657/19657 [==============================] - 87s 4ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 45/50\n",
      "19651/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00045: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 89s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 46/50\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0071\n",
      "Epoch 00046: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 89s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 47/50\n",
      "19649/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00047: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 89s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 48/50\n",
      "19647/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00048: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 90s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 49/50\n",
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00049: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 91s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n",
      "Epoch 50/50\n",
      "19655/19657 [============================>.] - ETA: 0s - loss: 0.0072\n",
      "Epoch 00050: val_loss did not improve from 0.00247\n",
      "19657/19657 [==============================] - 90s 5ms/step - loss: 0.0072 - val_loss: 0.0025\n"
     ]
    }
   ],
   "source": [
    "model_check2 = tf.keras.callbacks.ModelCheckpoint(model_path,\n",
    "                                                 monitor='val_loss', \n",
    "                                                 save_best_only=True, \n",
    "                                                 mode='min',\n",
    "                                                 verbose=1)\n",
    "\n",
    "tensorboard_callback2 = tf.keras.callbacks.TensorBoard(logdir, \n",
    "                                                      histogram_freq = 0, \n",
    "                                                      write_graph = True, \n",
    "                                                      write_grads = False, \n",
    "                                                      write_images = False, \n",
    "                                                      embeddings_freq=0, \n",
    "                                                      embeddings_layer_names=None, \n",
    "                                                      embeddings_metadata=None,\n",
    "                                                      embeddings_data=None)\n",
    "\n",
    "autoencoder2.compile(optimizer='adam', loss=['binary_crossentropy', tf.keras.losses.KLDivergence()])\n",
    "\n",
    "autoencoder_train2 = autoencoder2.fit(x_train_norm, x_train_norm, \n",
    "                                      batch_size=batch_size,epochs=50,\n",
    "                                      verbose=1, shuffle=False, \n",
    "                                      validation_data=(x_val_norm, x_val_norm),\n",
    "                                      callbacks=[step_decay_lrate(0.01, 0.4, 5.0),\n",
    "                                                 tensorboard_callback2,\n",
    "                                                 model_check2],\n",
    "                                      initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder2.load_weights('nn_results/gaia_v1_autoencoder_nn_2020-08-15T0255.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def graphFeatures(predicted_norm, use_xlims = True):\n",
    "    predicted   = np.multiply(predicted_norm, normalize_factors)\n",
    "    predicted_T = predicted.T\n",
    "    \n",
    "    # xlims = {\n",
    "    #     \"ra_error\"   : [0,0.1],\n",
    "    #     \"dec_error\"  : [0,0.1],\n",
    "    #     \"pmra\"       : [-250,250],\n",
    "    #     \"pmra_error\" : [0,0.25],\n",
    "    #     \"pmdec\"      : [-100,100],\n",
    "    #     \"pmdec_error\": [0,0.2],\n",
    "    #     \"parallax\"   : [0,10],\n",
    "    #     \"parallax_error\" : [0,0.1],\n",
    "    #     \"phot_g_mean_flux\" : [-.1e6,4e6],\n",
    "    #     \"phot_g_mean_flux_error\" : [-1500,1500],\n",
    "    #     \"phot_bp_mean_flux\" : [-.1e6,2e6],\n",
    "    #     \"phot_bp_mean_flux_error\" : [-1500,1500],\n",
    "    #     \"phot_rp_mean_flux\" : [-.1e6,2e6],\n",
    "    #     \"phot_rp_mean_flux_error\" : [-1500,1500],\n",
    "    #     \"radial_velocity\" : [-200,200],\n",
    "    #     \"radial_velocity_error\" : [0,7.5],\n",
    "    #     \"radius_val\" : [0,50],\n",
    "    #     \"lum_val\" : [0,300]\n",
    "    # }\n",
    "\n",
    "    xlims = {\n",
    "        \"ra_error\"   : [0,0.1],\n",
    "        \"dec\"        : [-100,100],\n",
    "        \"pmra\"       : [-100,100],\n",
    "        \"pmdec\"      : [-75,75],\n",
    "        \"parallax\"   : [0,10],\n",
    "        \"phot_g_mean_flux\" : [-.1e6,4e6],\n",
    "        \"phot_bp_mean_flux\" : [-.1e6,2e6],\n",
    "        \"phot_rp_mean_flux\" : [-.1e6,2e6],\n",
    "        \"radial_velocity\" : [-200,200],\n",
    "        \"radius_val\" : [0,50],\n",
    "        \"lum_val\" : [0,300]\n",
    "    }\n",
    "\n",
    "    def compareFeatureDistr(mainPlot, use_xlims, f_name = None, f_id = None, label = False, bins = 70, kde = False):\n",
    "        if f_id is None and f_name is None: raise Exception\n",
    "        elif f_id is None: feature_id = feature_id_dict[f_name]\n",
    "        elif f_name is None: f_name = feature_id_dict[f_id]\n",
    "\n",
    "        mainPlot.flat[f_id].set_title(f_name, fontsize=20, pad=10)\n",
    "        mainPlot.flat[f_id].set(xlabel=f_name, ylabel='')\n",
    "\n",
    "        if f_name in xlims and use_xlims:\n",
    "            mainPlot.flat[f_id].set_xlim(xlims[f_name])\n",
    "            if bins is not None:\n",
    "                binwidth = (xlims[f_name][1] - xlims[f_name][0]) / bins\n",
    "                bins = np.arange(xlims[f_name][0], xlims[f_name][1] + binwidth, binwidth)\n",
    "\n",
    "        sns.distplot(predicted_T[f_id], ax=mainPlot.flat[f_id], label=\"Model Distribution\" if label else None,\n",
    "                    bins = bins, kde = kde)\n",
    "        sns.distplot(x_test_T[f_id], ax=mainPlot.flat[f_id], label=\"Actual Distribution\" if label else None,\n",
    "                    bins = bins, kde = kde)\n",
    "\n",
    "        if f_name in xlims and use_xlims: mainPlot.flat[f_id].set_xlim(xlims[f_name])\n",
    "\n",
    "    fig, mainPlot = plt.subplots(math.ceil(len(d_table.fields)/2), 2,figsize=(15,45))\n",
    "    fig.suptitle(\"Actual vs Model Feature Distributions on x_test\", fontsize=25, y=.95)\n",
    "\n",
    "    for i in range(len(d_table.fields)):\n",
    "        if i == 0: compareFeatureDistr(mainPlot, use_xlims, f_id = i, label = True)\n",
    "        else: compareFeatureDistr(mainPlot, use_xlims, f_id = i)\n",
    "\n",
    "    plt.subplots_adjust(top=0.92, bottom=0.1, left=0.10, right=0.95, hspace=0.6, wspace=0.2)    \n",
    "    fig.legend()#loc=\"upper right\", bbox_to_anchor=(.8,.9))\n",
    "    plt.show()\n",
    "\n",
    "    fig.savefig('feature_distr_noerr' + time.strftime(\"%Y%m%d-%H%M%S\") + '.png', quality=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = autoencoder2.predict(x_test_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x3240 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "graphFeatures(pred, use_xlims=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-3.4924421, -3.296889 , -3.5635424, ..., -3.4229927, -3.3536777,\n",
       "       -3.4978209], dtype=float32)"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred.T[2][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -3.79479556,  27.02592955,  -0.69910253, ..., -25.37532684,\n",
       "        -8.93293171,  -2.94510096])"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.T[2][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
